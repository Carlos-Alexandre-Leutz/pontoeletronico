{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Marcação de Ponto Eletrônico\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.marcarPonto && $options.marcarPonto(...args))\n  }, \"Marcar Ponto\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.registros, registro => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: registro.id\n    }, _toDisplayString(registro.dataHora) + \" - \" + _toDisplayString(registro.status) + \" - \" + _toDisplayString(registro.downloadUrl), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","marcarPonto","_Fragment","_renderList","$data","registros","registro","key","id","dataHora","_toDisplayString","status","downloadUrl"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"marcarPonto\">Marcar Ponto</button>\n    <ul>\n      <li v-for=\"registro in registros\" :key=\"registro.id\">\n        {{ registro.dataHora }} - {{ registro.status }} - {{ registro.downloadUrl }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore, collection, addDoc, serverTimestamp } from 'firebase/firestore';\nimport { getStorage, ref, uploadString, getDownloadURL } from 'firebase/storage';\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    async marcarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      if (!user) {\n        console.error('Usuário não autenticado');\n        return;\n      }\n\n      const db = getFirestore();\n      const pontoCollection = collection(db, 'pontos');\n\n      try {\n        const novoRegistro = {\n          dataHora: serverTimestamp(),\n          status: 'Marcado',\n          userId: user.uid,\n        };\n\n        // Adiciona um novo registro no Firestore\n        const docRef = await addDoc(pontoCollection, novoRegistro);\n\n        console.log('Ponto marcado com sucesso:', docRef.id);\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({ ...novoRegistro, id: docRef.id });\n\n        // Salva um arquivo no Storage\n        const storage = getStorage();\n        const path = `ponto-entrada/${user.uid}/${docRef.id}.txt`;\n        await uploadString(ref(storage, path), 'Ponto Eletrônico Marcado');\n\n        // Obtém o URL de download do arquivo no Storage\n        const downloadUrl = await getDownloadURL(ref(storage, path));\n\n        // Atualiza a lista de registros na interface do usuário com o URL de download\n        this.registros.find((r) => r.id === docRef.id).downloadUrl = downloadUrl;\n      } catch (error) {\n        console.error('Erro ao marcar ponto:', error.message);\n      }\n    },\n  },\n  async created() {\n    const auth = getAuth();\n    const user = auth.currentUser;\n\n    if (!user) {\n      console.error('Usuário não autenticado');\n      return;\n    }\n\n    const db = getFirestore();\n    const pontoCollection = collection(db, 'pontos');\n\n    // Consulta os registros de ponto do usuário no Firestore\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const querySnapshot = await getDocs(\n      query(pontoCollection, where('userId', '==', user.uid), orderBy('dataHora', 'desc'), limit(10))\n    );\n\n    querySnapshot.forEach((doc) => {\n      this.registros.push({ ...doc.data(), id: doc.id });\n    });\n  },\n};\n</script>\n"],"mappings":";gCAGIA,mBAAA,CAAqC,YAAjC,8BAA4B;;uBADlCC,mBAAA,CAQM,cAPJC,UAAqC,EACrCF,mBAAA,CAAkD;IAAzCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,cAAY,GACzCL,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKO,SAAA,QAAAC,WAAA,CAFkBC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAnBX,mBAAA,CAEK;MAF8BY,GAAG,EAAED,QAAQ,CAACE;wBAC5CF,QAAQ,CAACG,QAAQ,IAAG,KAAG,GAAAC,gBAAA,CAAGJ,QAAQ,CAACK,MAAM,IAAG,KAAG,GAAAD,gBAAA,CAAGJ,QAAQ,CAACM,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}