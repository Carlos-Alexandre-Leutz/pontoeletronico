{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getAuth } from 'firebase/auth';\nimport { getDatabase, ref, push, set, serverTimestamp, get, query, orderBy, limit } from 'firebase/database';\nexport default {\n  data() {\n    return {\n      registros: [],\n      entradaPendente: null\n    };\n  },\n  methods: {\n    async marcarEntrada() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      if (!user) {\n        console.error('Usuário não autenticado');\n        return;\n      }\n      this.entradaPendente = serverTimestamp();\n    },\n    async marcarSaida() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      if (!user || !this.entradaPendente) {\n        console.error('Usuário não autenticado ou entrada não marcada');\n        return;\n      }\n      const db = getDatabase();\n      const pontoRef = ref(db, 'pontos');\n      try {\n        const novoRegistro = {\n          entrada: this.entradaPendente,\n          saida: serverTimestamp()\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid\n        });\n        console.log('Registro de ponto salvo com sucesso:', novoRegistroRef.key);\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({\n          ...novoRegistro,\n          id: novoRegistroRef.key,\n          tempoGasto: this.calcularTempoGasto(novoRegistro)\n        });\n        this.entradaPendente = null;\n      } catch (error) {\n        console.error('Erro ao marcar ponto:', error.message);\n      }\n    },\n    calcularTempoGasto(registro) {\n      if (registro.entrada && registro.saida) {\n        const entrada = new Date(registro.entrada);\n        const saida = new Date(registro.saida);\n        const diferencaEmMilissegundos = saida - entrada;\n        const horas = Math.floor(diferencaEmMilissegundos / (1000 * 60 * 60));\n        const minutos = Math.floor(diferencaEmMilissegundos % (1000 * 60 * 60) / (1000 * 60));\n        return `${horas}h ${minutos}min`;\n      } else {\n        return 'Tempo não calculado';\n      }\n    }\n  },\n  async created() {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    if (!user) {\n      console.error('Usuário não autenticado');\n      return;\n    }\n    const db = getDatabase();\n    const pontoRef = ref(db, 'pontos');\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const queryRef = query(pontoRef, orderBy('entrada', 'desc'), limit(10));\n    const snapshot = await get(queryRef, 'value');\n    const registros = [];\n    if (snapshot.exists()) {\n      snapshot.forEach(childSnapshot => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({\n          key,\n          ...data,\n          tempoGasto: this.calcularTempoGasto(data)\n        });\n      });\n    }\n    this.registros = registros;\n  }\n};","map":{"version":3,"names":["getAuth","getDatabase","ref","push","set","serverTimestamp","get","query","orderBy","limit","data","registros","entradaPendente","methods","marcarEntrada","auth","user","currentUser","console","error","marcarSaida","db","pontoRef","novoRegistro","entrada","saida","novoRegistroRef","userId","uid","log","key","id","tempoGasto","calcularTempoGasto","message","registro","Date","diferencaEmMilissegundos","horas","Math","floor","minutos","created","queryRef","snapshot","exists","forEach","childSnapshot","val"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"marcarEntrada\">Marcar Entrada</button>\n    <button @click=\"marcarSaida\">Marcar Saída</button>\n    <ul>\n      <li v-for=\"registro in registros\" :key=\"registro.id\">\n        {{ registro.entrada }} - {{ registro.saida }} - {{ registro.tempoGasto }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from 'firebase/auth';\nimport { getDatabase, ref, push, set, serverTimestamp, get, query, orderBy, limit } from 'firebase/database';\n\nexport default {\n  data() {\n    return {\n      registros: [],\n      entradaPendente: null,\n    };\n  },\n  methods: {\n    async marcarEntrada() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      if (!user) {\n        console.error('Usuário não autenticado');\n        return;\n      }\n\n      this.entradaPendente = serverTimestamp();\n    },\n    async marcarSaida() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      if (!user || !this.entradaPendente) {\n        console.error('Usuário não autenticado ou entrada não marcada');\n        return;\n      }\n\n      const db = getDatabase();\n      const pontoRef = ref(db, 'pontos');\n\n      try {\n        const novoRegistro = {\n          entrada: this.entradaPendente,\n          saida: serverTimestamp(),\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid,\n        });\n\n        console.log('Registro de ponto salvo com sucesso:', novoRegistroRef.key);\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({ ...novoRegistro, id: novoRegistroRef.key, tempoGasto: this.calcularTempoGasto(novoRegistro) });\n        this.entradaPendente = null;\n      } catch (error) {\n        console.error('Erro ao marcar ponto:', error.message);\n      }\n    },\n    calcularTempoGasto(registro) {\n      if (registro.entrada && registro.saida) {\n        const entrada = new Date(registro.entrada);\n        const saida = new Date(registro.saida);\n        const diferencaEmMilissegundos = saida - entrada;\n\n        const horas = Math.floor(diferencaEmMilissegundos / (1000 * 60 * 60));\n        const minutos = Math.floor((diferencaEmMilissegundos % (1000 * 60 * 60)) / (1000 * 60));\n\n        return `${horas}h ${minutos}min`;\n      } else {\n        return 'Tempo não calculado';\n      }\n    },\n  },\n  async created() {\n    const auth = getAuth();\n    const user = auth.currentUser;\n\n    if (!user) {\n      console.error('Usuário não autenticado');\n      return;\n    }\n\n    const db = getDatabase();\n    const pontoRef = ref(db, 'pontos');\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const queryRef = query(pontoRef, orderBy('entrada', 'desc'), limit(10));\n    const snapshot = await get(queryRef, 'value');\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({ key, ...data, tempoGasto: this.calcularTempoGasto(data) });\n      });\n    }\n\n    this.registros = registros;\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}