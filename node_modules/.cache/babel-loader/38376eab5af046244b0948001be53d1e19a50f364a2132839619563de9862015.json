{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Marcação de Ponto Eletrônico\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.marcarEntrada && $options.marcarEntrada(...args))\n  }, \"Marcar Entrada\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.marcarSaida && $options.marcarSaida(...args))\n  }, \"Marcar Saída\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.registros, registro => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: registro.id\n    }, _toDisplayString(registro.entrada) + \" - \" + _toDisplayString(registro.saida) + \" - \" + _toDisplayString(registro.tempoGasto), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","marcarEntrada","marcarSaida","_Fragment","_renderList","$data","registros","registro","key","id","entrada","_toDisplayString","saida","tempoGasto"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"marcarEntrada\">Marcar Entrada</button>\n    <button @click=\"marcarSaida\">Marcar Saída</button>\n    <ul>\n      <li v-for=\"registro in registros\" :key=\"registro.id\">\n        {{ registro.entrada }} - {{ registro.saida }} -\n        {{ registro.tempoGasto }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport {\n  getDatabase,\n  ref,\n  push,\n  set,\n  serverTimestamp,\n  get,\n  query,\n  orderBy,\n  limit,\n} from \"firebase/database\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n      entradaPendente: null,\n    };\n  },\n  methods: {\n    async marcarEntrada() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      if (!user) {\n        console.error(\"Usuário não autenticado\");\n        return;\n      }\n\n      this.entradaPendente = serverTimestamp();\n    },\n    async marcarSaida() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      if (!user || !this.entradaPendente) {\n        console.error(\"Usuário não autenticado ou entrada não marcada\");\n        return;\n      }\n\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n\n      try {\n        const novoRegistro = {\n          entrada: this.entradaPendente,\n          saida: serverTimestamp(),\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid,\n        });\n\n        console.log(\n          \"Registro de ponto salvo com sucesso:\",\n          novoRegistroRef.key\n        );\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({\n          ...novoRegistro,\n          id: novoRegistroRef.key,\n          tempoGasto: this.calcularTempoGasto(novoRegistro),\n        });\n        this.entradaPendente = null;\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    calcularTempoGasto(registro) {\n      if (registro.entrada && registro.saida) {\n        const entrada = new Date(registro.entrada);\n        const saida = new Date(registro.saida);\n        const diferencaEmMilissegundos = saida - entrada;\n\n        const horas = Math.floor(diferencaEmMilissegundos / (1000 * 60 * 60));\n        const minutos = Math.floor(\n          (diferencaEmMilissegundos % (1000 * 60 * 60)) / (1000 * 60)\n        );\n\n        return `${horas}h ${minutos}min`;\n      } else {\n        return \"Tempo não calculado\";\n      }\n    },\n  },\n  async created() {\n    const auth = getAuth();\n    const user = auth.currentUser;\n\n    if (!user) {\n      console.error(\"Usuário não autenticado\");\n      return;\n    }\n\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const queryRef = query(pontoRef, orderBy(\"entrada\", \"desc\"), limit(10));\n    const snapshot = await get(queryRef, \"value\");\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({\n          key,\n          ...data,\n          tempoGasto: this.calcularTempoGasto(data),\n        });\n      });\n    }\n\n    this.registros = registros;\n  },\n};\n</script>\n"],"mappings":";gCAGIA,mBAAA,CAAqC,YAAjC,8BAA4B;;uBADlCC,mBAAA,CAUM,cATJC,UAAqC,EACrCF,mBAAA,CAAsD;IAA7CG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,gBAAc,GAC7CL,mBAAA,CAAkD;IAAzCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,WAAA,IAAAF,QAAA,CAAAE,WAAA,IAAAH,IAAA,CAAW;KAAE,cAAY,GACzCL,mBAAA,CAKK,c,kBAJHC,mBAAA,CAGKQ,SAAA,QAAAC,WAAA,CAHkBC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAnBZ,mBAAA,CAGK;MAH8Ba,GAAG,EAAED,QAAQ,CAACE;wBAC5CF,QAAQ,CAACG,OAAO,IAAG,KAAG,GAAAC,gBAAA,CAAGJ,QAAQ,CAACK,KAAK,IAAG,KAC7C,GAAAD,gBAAA,CAAGJ,QAAQ,CAACM,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}