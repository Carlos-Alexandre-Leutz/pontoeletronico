{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Marcação de Ponto Eletrônico\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.user ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Olá, \" + _toDisplayString($data.user.displayName) + \"!\", 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Bem-vindo! Faça login para usar o ponto eletrônico.\")), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.clockInClockOut && $options.clockInClockOut(...args))\n  }, _toDisplayString($data.clockIn ? \"Registrar Saída\" : \"Registrar Entrada\"), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","$data","user","_hoisted_2","_toDisplayString","displayName","_hoisted_3","onClick","_cache","args","$options","clockInClockOut","clockIn"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- ClockInClockOut.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <p v-if=\"user\">Olá, {{ user.displayName }}!</p>\n    <p v-else>Bem-vindo! Faça login para usar o ponto eletrônico.</p>\n\n    <button @click=\"clockInClockOut\">\n      {{ clockIn ? \"Registrar Saída\" : \"Registrar Entrada\" }}\n    </button>\n  </div>\n</template>\n\n<script>\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport {\n  getFirestore,\n  collection,\n  addDoc,\n  serverTimestamp,\n} from \"firebase/firestore\";\n\nexport default {\n  data() {\n    return {\n      user: null,\n      clockIn: false, // True para marcação de entrada, False para marcação de saída\n    };\n  },\n  created() {\n    const auth = getAuth();\n    onAuthStateChanged(auth, (user) => {\n      this.user = user; // adicionar isso em um vuex\n    });\n  },\n  methods: {\n    async clockInClockOut() {\n      if (!this.user) {\n        console.error(\n          \"Usuário não autenticado. Faça login para usar o ponto eletrônico.\"\n        );\n        return;\n      }\n\n      const db = getFirestore();\n      const pointsCollection = collection(db, \"pontos\");\n\n      try {\n        // Adiciona um novo registro com a data/hora atual e o tipo de marcação\n        await addDoc(pointsCollection, {\n          userId: this.user.uid,\n          timestamp: serverTimestamp(),\n          type: this.clockIn ? \"Entrada\" : \"Saída\",\n        });\n\n        console.log(\n          `Marcação de ponto ${\n            this.clockIn ? \"entrada\" : \"saída\"\n          } registrada com sucesso.`\n        );\n\n        // Inverte o estado para a próxima marcação\n        this.clockIn = !this.clockIn;\n      } catch (error) {\n        console.error(\"Erro ao registrar a marcação de ponto:\", error.message);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":";gCAGIA,mBAAA,CAAqC,YAAjC,8BAA4B;;;;;;;;uBADlCC,mBAAA,CAQM,cAPJC,UAAqC,EAC5BC,KAAA,CAAAC,IAAI,I,cAAbH,mBAAA,CAA+C,KAAAI,UAAA,EAAhC,OAAK,GAAAC,gBAAA,CAAGH,KAAA,CAAAC,IAAI,CAACG,WAAW,IAAG,GAAC,oB,cAC3CN,mBAAA,CAAiE,KAAAO,UAAA,EAAvD,qDAAmD,IAE7DR,mBAAA,CAES;IAFAS,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;sBAC1BR,KAAA,CAAAW,OAAO,2D"},"metadata":{},"sourceType":"module","externalDependencies":[]}