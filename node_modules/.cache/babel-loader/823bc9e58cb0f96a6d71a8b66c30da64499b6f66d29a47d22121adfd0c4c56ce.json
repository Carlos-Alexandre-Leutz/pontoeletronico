{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Marcação de Ponto Eletrônico\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"card\"\n};\nconst _hoisted_3 = {\n  class: \"card-body\"\n};\nconst _hoisted_4 = {\n  class: \"card-title\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.iniciarPonto && $options.iniciarPonto(...args))\n  }, \"Iniciar Dia\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.pararPonto && $options.pararPonto(...args))\n  }, \"Finalizar Dia\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.pausarPonto && $options.pausarPonto(...args))\n  }, \"Pausar\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.registros, registro => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: registro.userId,\n      class: \"col-md-12\"\n    }, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h5\", _hoisted_4, \" Dia: \" + _toDisplayString(registro.data.data.dia) + \"/\" + _toDisplayString(registro.data.data.mes) + \"/\" + _toDisplayString(registro.data.data.ano), 1 /* TEXT */), _hoisted_5, _createTextVNode(\" hora inicio: \" + _toDisplayString(registro.data.horaInicio.horas) + \":\" + _toDisplayString(registro.data.horaInicio.minutos) + \" \", 1 /* TEXT */), _hoisted_6, $options.timeSpentTask(registro.data.horaInicio, registro.data.horaFim) ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createTextVNode(\" Hora fim: \" + _toDisplayString(registro.data.horaFim.horas) + \":\" + _toDisplayString(registro.data.horaFim.minutos) + \" \", 1 /* TEXT */), _hoisted_7], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" Tempo gasto: \" + _toDisplayString($options.timeSpentTask(registro.data)) + \" \", 1 /* TEXT */), !$options.timeSpentTask(registro.data) ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      onClick: $event => $options.pararPonto(registro.key, registro)\n    }, \" Finalizar \", 8 /* PROPS */, _hoisted_8)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n      onClick: $event => $options.adiconarTarefa(registro.key, registro)\n    }, \" adiconar Tarefa \", 8 /* PROPS */, _hoisted_9), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(registro.tarefas, tarefa => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: tarefa\n      }, [tarefa ? (_openBlock(), _createElementBlock(_Fragment, {\n        key: 0\n      }, [_createTextVNode(_toDisplayString(tarefa.descricao) + \" \" + _toDisplayString(tarefa.horaInicio) + \" \" + _toDisplayString(tarefa.horaFim), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)]);\n    }), 128 /* KEYED_FRAGMENT */))])])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","iniciarPonto","pararPonto","pausarPonto","_Fragment","_renderList","$data","registros","registro","key","userId","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","data","dia","mes","ano","_hoisted_5","horaInicio","horas","minutos","_hoisted_6","timeSpentTask","horaFim","_hoisted_7","$event","_hoisted_8","adiconarTarefa","_hoisted_9","tarefas","tarefa","descricao"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"iniciarPonto\">Iniciar Dia</button>\n    <button @click=\"pararPonto\">Finalizar Dia</button>\n    <button @click=\"pausarPonto\">Pausar</button>\n    <div v-for=\"registro in registros\" :key=\"registro.userId\" class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">\n            Dia: {{ registro.data.data.dia }}/{{ registro.data.data.mes }}/{{\n              registro.data.data.ano\n            }}\n          </h5>\n          <br />\n          hora inicio: {{ registro.data.horaInicio.horas }}:{{\n            registro.data.horaInicio.minutos\n          }}\n          <br />\n          <template v-if=\"timeSpentTask(registro.data.horaInicio, registro.data.horaFim)\">\n            Hora fim: {{ registro.data.horaFim.horas }}:{{\n              registro.data.horaFim.minutos\n            }}\n            <br />\n          </template>\n          Tempo gasto: {{ timeSpentTask(registro.data) }}\n          <template v-if=\"!timeSpentTask(registro.data)\">\n            <button @click=\"pararPonto(registro.key, registro)\">\n              Finalizar\n            </button>\n          </template>\n          <button @click=\"adiconarTarefa(registro.key, registro)\">\n            adiconar Tarefa\n          </button>\n          <div v-for=\"tarefa in registro.tarefas\" :key=\"tarefa\">\n            <template v-if=\"tarefa\">\n              {{ tarefa.descricao }}\n              {{ tarefa.horaInicio }}\n              {{ tarefa.horaFim }}\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    async iniciarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n\n      try {\n        let dataAtual = new Date();\n        let objetoDataHora = {\n          data: {\n            dia: dataAtual.getDate(),\n            mes: dataAtual.getMonth() + 1,\n            ano: dataAtual.getFullYear(),\n          },\n          horaInicio: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n          horaFim: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n          tarefas: [],\n        };\n\n        const novoRegistro = {\n          data: objetoDataHora,\n          tarefas: [{ tarefa: \"asd\" }],\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid,\n        });\n\n        console.log(\n          \"Registro de ponto salvo com sucesso:\",\n          novoRegistroRef.key\n        );\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({ ...novoRegistro, id: novoRegistroRef.key });\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    async pararPonto(registroId, registro) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          registro.data.horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    async adiconarTarefa(registroId, registro) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n\n          const tarefa = {\n            descricao: \"tarefa nome\",\n            horaInicio: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n            horaFim: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n          };\n          console.log(registro.data);\n          registro.tarefas.push(tarefa);\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    timeSpentTask(horaInicio, horaFim) {\n      //receber 2 datas e responder o tempo\n      let dataInicio = new Date();\n      dataInicio.setHours(objetoDataHora.horaInicio.horas);\n      dataInicio.setMinutes(objetoDataHora.horaInicio.minutos);\n\n      let dataFim = new Date();\n      dataFim.setHours(objetoDataHora.horaFim.horas);\n      dataFim.setMinutes(objetoDataHora.horaFim.minutos);\n\n      // Calculando a diferença em milissegundos\n      let diferencaEmMilissegundos = dataFim - dataInicio;\n\n      // Convertendo a diferença para minutos\n      let diferencaEmMinutos = diferencaEmMilissegundos / (1000 * 60);\n\n      return diferencaEmMinutos;\n    },\n    async pausarPonto() {},\n  },\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({ key, ...data });\n      });\n    }\n\n    this.registros = registros;\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}