{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\nimport Swal from \"sweetalert2\";\nexport default {\n  data() {\n    return {\n      registros: []\n    };\n  },\n  methods: {\n    iniciarPonto() {\n      Swal.fire({\n        title: \"Adicione o numero da tarefa que você vai iniciar\",\n        input: \"text\",\n        inputAttributes: {\n          autocapitalize: \"off\"\n        },\n        showCancelButton: true,\n        confirmButtonText: \"Salvar\",\n        showLoaderOnConfirm: true,\n        allowOutsideClick: () => !Swal.isLoading()\n      }).then(result => {\n        Swal.fire({\n          title: \"Adicione a descrição\",\n          input: \"text\",\n          inputAttributes: {\n            autocapitalize: \"off\"\n          },\n          showCancelButton: true,\n          confirmButtonText: \"Salvar\",\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading()\n        }).then(descricao => {\n          if (result.isConfirmed) {\n            this.sendPonto(result.value);\n          } else {\n            return;\n          }\n        });\n      });\n    },\n    async sendPonto(taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n      try {\n        let dataAtual = new Date();\n        let objetoDataHora = {\n          data: {\n            dia: dataAtual.getDate(),\n            mes: dataAtual.getMonth() + 1,\n            ano: dataAtual.getFullYear()\n          },\n          horaInicio: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes()\n          },\n          horaFim: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes()\n          },\n          tarefas: []\n        };\n        const novoRegistro = {\n          data: objetoDataHora,\n          tarefas: [{\n            descricao: taskName,\n            horaInicio: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes()\n            },\n            horaFim: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes()\n            }\n          }]\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid\n        });\n        console.log(\"Registro de ponto salvo com sucesso:\", novoRegistroRef.key);\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.reverse();\n        this.registros.push({\n          ...novoRegistro,\n          id: novoRegistroRef.key\n        });\n        this.registros.reverse();\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    async pararPonto(registroId, registro) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      try {\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          registro.data.horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes()\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    adiconarTarefa(registroId, registro) {\n      let tarefaEmAndamento = false;\n      registro.tarefas.forEach(tarefa => {\n        console.log(tarefa);\n        if (!this.timeSpentTask(tarefa.horaInicio, tarefa.horaFim)) {\n          console.log(\"A tarefa \" + tarefa.descricao + \" não foi finalizada, finalizar antes de iniciar outra\");\n          tarefaEmAndamento = true;\n          Swal.fire({\n            title: \"a tarefa \" + tarefa.descricao + \" não foi finalizada, finalizar antes de iniciar outra\",\n            confirmButtonText: \"OK\"\n          });\n        }\n      });\n      if (!tarefaEmAndamento) {\n        Swal.fire({\n          title: \"Adicione o nome da tarefa que você vai iniciar\",\n          input: \"text\",\n          inputAttributes: {\n            autocapitalize: \"off\"\n          },\n          showCancelButton: true,\n          confirmButtonText: \"Salvar\",\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading()\n        }).then(result => {\n          if (result.isConfirmed) {\n            this.sendTask(registroId, registro, result.value);\n          } else {\n            return;\n          }\n        });\n      }\n    },\n    async sendTask(registroId, registro, taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      console.log(taskName);\n      try {\n        console.log(taskName);\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          console.log(taskName);\n          const tarefa = {\n            descricao: taskName,\n            horaInicio: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes()\n            },\n            horaFim: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes()\n            }\n          };\n          console.log(registro.data);\n          registro.tarefas.push(tarefa);\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    async finalizarTarefa(registroId, registro, index) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      let dataAtual = new Date();\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      try {\n        if (registro.userId === user.uid) {\n          console.log(registro.tarefas[index].horaFim);\n          registro.tarefas[index].horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes()\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    timeSpentTask(horaInicio, horaFim) {\n      let dataInicio = new Date();\n      dataInicio.setHours(horaInicio.horas);\n      dataInicio.setMinutes(horaInicio.minutos);\n      let dataFim = new Date();\n      dataFim.setHours(horaFim.horas);\n      dataFim.setMinutes(horaFim.minutos);\n\n      // Calculando a diferença em milissegundos\n      let diferencaEmMilissegundos = dataFim - dataInicio;\n\n      // Convertendo a diferença para minutos\n      let diferencaEmMinutos = diferencaEmMilissegundos / (1000 * 60);\n      if (!diferencaEmMinutos) {\n        return 0;\n      }\n      return this.dataFormat(diferencaEmMinutos);\n    },\n    dataFormat(minutos) {\n      let horas = Math.floor(minutos / 60);\n      let minutosRestantes = minutos % 60;\n\n      // Formata as horas e minutos com dois dígitos\n      let horasFormatadas = horas < 10 ? \"0\" + horas : horas;\n      let minutosFormatados = minutosRestantes < 10 ? \"0\" + minutosRestantes : minutosRestantes;\n      return horasFormatadas + \":\" + minutosFormatados;\n    },\n    async pausarPonto() {},\n    validarDataMaiorHoje(dia, mes, ano) {\n      const dataAtual = new Date();\n\n      // Obter o ano atual\n      const anoAtual = dataAtual.getFullYear();\n\n      // Obter o mês atual (lembre-se de que os meses em JavaScript começam do zero, então você pode precisar adicionar 1)\n      const mesAtual = dataAtual.getMonth() + 1;\n\n      // Obter o dia do mês atual\n      const diaAtual = dataAtual.getDate();\n      if (dia == diaAtual && mes == mesAtual && ano == anoAtual) {\n        return true;\n      }\n      return false;\n    }\n  },\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n    if (snapshot.exists()) {\n      snapshot.forEach(childSnapshot => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({\n          key,\n          ...data\n        });\n      });\n    }\n    this.registros = registros.reverse();\n  }\n};","map":{"version":3,"names":["getAuth","getDatabase","get","ref","push","set","Swal","data","registros","methods","iniciarPonto","fire","title","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","allowOutsideClick","isLoading","then","result","descricao","isConfirmed","sendPonto","value","taskName","auth","user","currentUser","db","pontoRef","dataAtual","Date","objetoDataHora","dia","getDate","mes","getMonth","ano","getFullYear","horaInicio","horas","getHours","minutos","getMinutes","horaFim","tarefas","novoRegistro","novoRegistroRef","userId","uid","console","log","key","reverse","id","error","message","pararPonto","registroId","registro","warn","adiconarTarefa","tarefaEmAndamento","forEach","tarefa","timeSpentTask","sendTask","finalizarTarefa","index","dataInicio","setHours","setMinutes","dataFim","diferencaEmMilissegundos","diferencaEmMinutos","dataFormat","Math","floor","minutosRestantes","horasFormatadas","minutosFormatados","pausarPonto","validarDataMaiorHoje","anoAtual","mesAtual","diaAtual","created","snapshot","exists","childSnapshot","val"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div style=\"margin: 0 auto\">\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"iniciarPonto\">Iniciar Periodo</button>\n    <!-- <button @click=\"pararPonto\">Finalizar Dia</button>\n    <button @click=\"pausarPonto\">Pausar</button> -->\n    <div v-for=\"registro in registros\" :key=\"registro.userId\" class=\"col-md-10\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">\n            Dia: {{ registro.data.data.dia }}/{{ registro.data.data.mes }}/{{\n              registro.data.data.ano\n            }}\n          </h5>\n          <br />\n          hora inicio: {{ registro.data.horaInicio.horas }}:{{\n            registro.data.horaInicio.minutos\n          }}\n          <br />\n          <template\n            v-if=\"\n              timeSpentTask(registro.data.horaInicio, registro.data.horaFim)\n            \"\n          >\n            Hora fim: {{ registro.data.horaFim.horas }}:{{\n              registro.data.horaFim.minutos\n            }}\n            <br />\n          </template>\n          Tempo gasto:\n          {{ timeSpentTask(registro.data.horaInicio, registro.data.horaFim) }}\n          <br />\n          <template\n            v-if=\"\n              !timeSpentTask(registro.data.horaInicio, registro.data.horaFim)\n            \"\n          >\n            <button @click=\"pararPonto(registro.key, registro)\">\n              Finalizar Periodo\n            </button>\n          </template>\n          <button\n            v-if=\"\n              validarDataMaiorHoje(\n                registro.data.data.dia,\n                registro.data.data.mes,\n                registro.data.data.ano\n              )\n            \"\n            @click=\"adiconarTarefa(registro.key, registro)\"\n          >\n            adiconar Tarefa\n          </button>\n          <div v-for=\"(tarefa, index) in registro.tarefas\" :key=\"tarefa\">\n            <template v-if=\"tarefa\">\n              <div class=\"col-md-10\">\n                <div class=\"card\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">{{ tarefa.descricao }}</h5>\n\n                    hora inicio: {{ tarefa.horaInicio.horas }}:{{\n                      tarefa.horaInicio.minutos\n                    }}\n                    <template\n                      v-if=\"timeSpentTask(tarefa.horaInicio, tarefa.horaFim)\"\n                    >\n                      Hora fim: {{ tarefa.horaFim.horas }}:{{\n                        tarefa.horaFim.minutos\n                      }}\n                      <br />\n                    </template>\n\n                    Tempo gasto:\n                    {{ timeSpentTask(tarefa.horaInicio, tarefa.horaFim) }}\n                    <template\n                      v-if=\"!timeSpentTask(tarefa.horaInicio, tarefa.horaFim)\"\n                    >\n                      <button\n                        @click=\"finalizarTarefa(registro.key, registro, index)\"\n                      >\n                        Finalizar Tarefa\n                      </button>\n                      <br />\n                    </template>\n                  </div>\n                </div>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\nimport Swal from \"sweetalert2\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    iniciarPonto() {\n      Swal.fire({\n        title: \"Adicione o numero da tarefa que você vai iniciar\",\n        input: \"text\",\n        inputAttributes: {\n          autocapitalize: \"off\",\n        },\n        showCancelButton: true,\n        confirmButtonText: \"Salvar\",\n        showLoaderOnConfirm: true,\n        allowOutsideClick: () => !Swal.isLoading(),\n      }).then((result) => {\n        Swal.fire({\n          title: \"Adicione a descrição\",\n          input: \"text\",\n          inputAttributes: {\n            autocapitalize: \"off\",\n          },\n          showCancelButton: true,\n          confirmButtonText: \"Salvar\",\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading(),\n        }).then((descricao) => {\n          if (result.isConfirmed) {\n            this.sendPonto(result.value);\n          } else {\n            return;\n          }\n\n        });\n\n      });\n    },\n    async sendPonto(taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n\n      try {\n        let dataAtual = new Date();\n        let objetoDataHora = {\n          data: {\n            dia: dataAtual.getDate(),\n            mes: dataAtual.getMonth() + 1,\n            ano: dataAtual.getFullYear(),\n          },\n          horaInicio: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n          horaFim: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n          tarefas: [],\n        };\n\n        const novoRegistro = {\n          data: objetoDataHora,\n          tarefas: [\n            {\n              descricao: taskName,\n              horaInicio: {\n                horas: dataAtual.getHours(),\n                minutos: dataAtual.getMinutes(),\n              },\n              horaFim: {\n                horas: dataAtual.getHours(),\n                minutos: dataAtual.getMinutes(),\n              },\n            },\n          ],\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid,\n        });\n\n        console.log(\n          \"Registro de ponto salvo com sucesso:\",\n          novoRegistroRef.key\n        );\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.reverse();\n        this.registros.push({ ...novoRegistro, id: novoRegistroRef.key });\n        this.registros.reverse();\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    async pararPonto(registroId, registro) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          registro.data.horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    adiconarTarefa(registroId, registro) {\n      let tarefaEmAndamento = false;\n      registro.tarefas.forEach((tarefa) => {\n        console.log(tarefa);\n        if (!this.timeSpentTask(tarefa.horaInicio, tarefa.horaFim)) {\n          console.log(\n            \"A tarefa \" +\n              tarefa.descricao +\n              \" não foi finalizada, finalizar antes de iniciar outra\"\n          );\n          tarefaEmAndamento = true;\n          Swal.fire({\n            title:\n              \"a tarefa \" +\n              tarefa.descricao +\n              \" não foi finalizada, finalizar antes de iniciar outra\",\n            confirmButtonText: \"OK\",\n          });\n        }\n      });\n      if (!tarefaEmAndamento) {\n        Swal.fire({\n          title: \"Adicione o nome da tarefa que você vai iniciar\",\n          input: \"text\",\n          inputAttributes: {\n            autocapitalize: \"off\",\n          },\n          showCancelButton: true,\n          confirmButtonText: \"Salvar\",\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading(),\n        }).then((result) => {\n          if (result.isConfirmed) {\n            this.sendTask(registroId, registro, result.value);\n          } else {\n            return;\n          }\n        });\n      }\n    },\n    async sendTask(registroId, registro, taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      console.log(taskName);\n      try {\n        console.log(taskName);\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          console.log(taskName);\n          const tarefa = {\n            descricao: taskName,\n            horaInicio: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n            horaFim: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n          };\n          console.log(registro.data);\n          registro.tarefas.push(tarefa);\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    async finalizarTarefa(registroId, registro, index) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      let dataAtual = new Date();\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          console.log(registro.tarefas[index].horaFim);\n          registro.tarefas[index].horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    timeSpentTask(horaInicio, horaFim) {\n      let dataInicio = new Date();\n      dataInicio.setHours(horaInicio.horas);\n      dataInicio.setMinutes(horaInicio.minutos);\n\n      let dataFim = new Date();\n      dataFim.setHours(horaFim.horas);\n      dataFim.setMinutes(horaFim.minutos);\n\n      // Calculando a diferença em milissegundos\n      let diferencaEmMilissegundos = dataFim - dataInicio;\n\n      // Convertendo a diferença para minutos\n      let diferencaEmMinutos = diferencaEmMilissegundos / (1000 * 60);\n      if (!diferencaEmMinutos) {\n        return 0;\n      }\n      return this.dataFormat(diferencaEmMinutos);\n    },\n    dataFormat(minutos) {\n      let horas = Math.floor(minutos / 60);\n      let minutosRestantes = minutos % 60;\n\n      // Formata as horas e minutos com dois dígitos\n      let horasFormatadas = horas < 10 ? \"0\" + horas : horas;\n      let minutosFormatados =\n        minutosRestantes < 10 ? \"0\" + minutosRestantes : minutosRestantes;\n\n      return horasFormatadas + \":\" + minutosFormatados;\n    },\n    async pausarPonto() {},\n    validarDataMaiorHoje(dia, mes, ano) {\n      const dataAtual = new Date();\n\n      // Obter o ano atual\n      const anoAtual = dataAtual.getFullYear();\n\n      // Obter o mês atual (lembre-se de que os meses em JavaScript começam do zero, então você pode precisar adicionar 1)\n      const mesAtual = dataAtual.getMonth() + 1;\n\n      // Obter o dia do mês atual\n      const diaAtual = dataAtual.getDate();\n      if (dia == diaAtual && mes == mesAtual && ano == anoAtual) {\n        return true;\n      }\n      return false;\n    },\n  },\n\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({ key, ...data });\n      });\n    }\n\n    this.registros = registros.reverse();\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}