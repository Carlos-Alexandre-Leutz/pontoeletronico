{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\nimport Swal from \"sweetalert2\";\nexport default {\n  data() {\n    return {\n      registros: []\n    };\n  },\n  methods: {\n    async iniciarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n      try {\n        Swal.fire({\n          title: \"Submit your Github username\",\n          input: \"text\",\n          inputAttributes: {\n            autocapitalize: \"off\"\n          },\n          showCancelButton: true,\n          confirmButtonText: \"Look up\",\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading()\n        }).then(result => {\n          if (result.isConfirmed) {\n            this.sendTask(registroId, registro, result.value);\n          } else {\n            return;\n          }\n        });\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    async pararPonto(registroId, registro) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      try {\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          registro.data.horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes()\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    adiconarTarefa(registroId, registro) {\n      Swal.fire({\n        title: \"Submit your Github username\",\n        input: \"text\",\n        inputAttributes: {\n          autocapitalize: \"off\"\n        },\n        showCancelButton: true,\n        confirmButtonText: \"Look up\",\n        showLoaderOnConfirm: true,\n        allowOutsideClick: () => !Swal.isLoading()\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.sendTask(registroId, registro, result.value);\n        } else {\n          return;\n        }\n      });\n    },\n    async sendTask(registroId, registro, taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      console.log(taskName);\n      try {\n        console.log(taskName);\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          console.log(taskName);\n          const tarefa = {\n            descricao: taskName,\n            horaInicio: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes()\n            },\n            horaFim: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes()\n            }\n          };\n          console.log(registro.data);\n          registro.tarefas.push(tarefa);\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    async finalizarTarefa(registroId, registro, index) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      let dataAtual = new Date();\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      try {\n        if (registro.userId === user.uid) {\n          console.log(registro.tarefas[index].horaFim);\n          registro.tarefas[index].horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes()\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    timeSpentTask(horaInicio, horaFim) {\n      let dataInicio = new Date();\n      dataInicio.setHours(horaInicio.horas);\n      dataInicio.setMinutes(horaInicio.minutos);\n      let dataFim = new Date();\n      dataFim.setHours(horaFim.horas);\n      dataFim.setMinutes(horaFim.minutos);\n\n      // Calculando a diferença em milissegundos\n      let diferencaEmMilissegundos = dataFim - dataInicio;\n\n      // Convertendo a diferença para minutos\n      let diferencaEmMinutos = diferencaEmMilissegundos / (1000 * 60);\n      if (!diferencaEmMinutos) {\n        return 0;\n      }\n      return this.dataFormat(diferencaEmMinutos);\n    },\n    dataFormat(minutos) {\n      let horas = Math.floor(minutos / 60);\n      let minutosRestantes = minutos % 60;\n\n      // Formata as horas e minutos com dois dígitos\n      let horasFormatadas = horas < 10 ? \"0\" + horas : horas;\n      let minutosFormatados = minutosRestantes < 10 ? \"0\" + minutosRestantes : minutosRestantes;\n      return horasFormatadas + \":\" + minutosFormatados;\n    },\n    async pausarPonto() {}\n  },\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n    if (snapshot.exists()) {\n      snapshot.forEach(childSnapshot => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({\n          key,\n          ...data\n        });\n      });\n    }\n    this.registros = registros;\n  }\n};","map":{"version":3,"names":["getAuth","getDatabase","get","ref","push","set","Swal","data","registros","methods","iniciarPonto","auth","user","currentUser","db","pontoRef","fire","title","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","allowOutsideClick","isLoading","then","result","isConfirmed","sendTask","registroId","registro","value","error","console","message","pararPonto","userId","uid","dataAtual","Date","horaFim","horas","getHours","minutos","getMinutes","log","warn","adiconarTarefa","taskName","tarefa","descricao","horaInicio","tarefas","finalizarTarefa","index","timeSpentTask","dataInicio","setHours","setMinutes","dataFim","diferencaEmMilissegundos","diferencaEmMinutos","dataFormat","Math","floor","minutosRestantes","horasFormatadas","minutosFormatados","pausarPonto","created","snapshot","exists","forEach","childSnapshot","key","val"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div style=\"margin: 0 auto\">\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"iniciarPonto\">Iniciar Dia</button>\n    <button @click=\"pararPonto\">Finalizar Dia</button>\n    <button @click=\"pausarPonto\">Pausar</button>\n    <div v-for=\"registro in registros\" :key=\"registro.userId\" class=\"col-md-10\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">\n            Dia: {{ registro.data.data.dia }}/{{ registro.data.data.mes }}/{{\n              registro.data.data.ano\n            }}\n          </h5>\n          <br />\n          hora inicio: {{ registro.data.horaInicio.horas }}:{{\n            registro.data.horaInicio.minutos\n          }}\n          <br />\n          <template\n            v-if=\"\n              timeSpentTask(registro.data.horaInicio, registro.data.horaFim)\n            \"\n          >\n            Hora fim: {{ registro.data.horaFim.horas }}:{{\n              registro.data.horaFim.minutos\n            }}\n            <br />\n          </template>\n          Tempo gasto:\n          {{ timeSpentTask(registro.data.horaInicio, registro.data.horaFim) }}\n          <template\n            v-if=\"\n              !timeSpentTask(registro.data.horaInicio, registro.data.horaFim)\n            \"\n          >\n            <button @click=\"pararPonto(registro.key, registro)\">\n              Finalizar\n            </button>\n          </template>\n          <button @click=\"adiconarTarefa(registro.key, registro)\">\n            adiconar Tarefa\n          </button>\n          <div v-for=\"(tarefa, index) in registro.tarefas\" :key=\"tarefa\">\n            <template v-if=\"tarefa\">\n              <div class=\"col-md-10\">\n                <div class=\"card\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">{{ tarefa.descricao }}</h5>\n\n                    hora inicio: {{ tarefa.horaInicio.horas }}:{{\n                      tarefa.horaInicio.minutos\n                    }}\n                    <template\n                      v-if=\"timeSpentTask(tarefa.horaInicio, tarefa.horaFim)\"\n                    >\n                      Hora fim: {{ tarefa.horaFim.horas }}:{{\n                        tarefa.horaFim.minutos\n                      }}\n                      <br />\n                    </template>\n\n                    Tempo gasto:\n                    {{ timeSpentTask(tarefa.horaInicio, tarefa.horaFim) }}\n                    <template\n                      v-if=\"!timeSpentTask(tarefa.horaInicio, tarefa.horaFim)\"\n                    >\n                      <button\n                        @click=\"finalizarTarefa(registro.key, registro, index)\"\n                      >\n                        Finalizar Tarefa\n                      </button>\n                      <br />\n                    </template>\n                  </div>\n                </div>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\nimport Swal from \"sweetalert2\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    async iniciarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n\n      try {\n\n        Swal.fire({\n        title: \"Submit your Github username\",\n        input: \"text\",\n        inputAttributes: {\n          autocapitalize: \"off\",\n        },\n        showCancelButton: true,\n        confirmButtonText: \"Look up\",\n        showLoaderOnConfirm: true,\n        allowOutsideClick: () => !Swal.isLoading(),\n        }).then((result) => {\n          if (result.isConfirmed) {\n            this.sendTask(registroId, registro, result.value);\n          } else {\n            return;\n          }\n        });\n\n        \n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    async pararPonto(registroId, registro) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          registro.data.horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    adiconarTarefa(registroId, registro) {\n      Swal.fire({\n        title: \"Submit your Github username\",\n        input: \"text\",\n        inputAttributes: {\n          autocapitalize: \"off\",\n        },\n        showCancelButton: true,\n        confirmButtonText: \"Look up\",\n        showLoaderOnConfirm: true,\n        allowOutsideClick: () => !Swal.isLoading(),\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.sendTask(registroId, registro, result.value);\n        } else {\n          return;\n        }\n      });\n    },\n    async sendTask(registroId, registro, taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      console.log(taskName);\n      try {\n        console.log(taskName);\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          console.log(taskName);\n          const tarefa = {\n            descricao: taskName,\n            horaInicio: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n            horaFim: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n          };\n          console.log(registro.data);\n          registro.tarefas.push(tarefa);\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    async finalizarTarefa(registroId, registro, index) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      let dataAtual = new Date();\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          console.log(registro.tarefas[index].horaFim);\n          registro.tarefas[index].horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    timeSpentTask(horaInicio, horaFim) {\n      let dataInicio = new Date();\n      dataInicio.setHours(horaInicio.horas);\n      dataInicio.setMinutes(horaInicio.minutos);\n\n      let dataFim = new Date();\n      dataFim.setHours(horaFim.horas);\n      dataFim.setMinutes(horaFim.minutos);\n\n      // Calculando a diferença em milissegundos\n      let diferencaEmMilissegundos = dataFim - dataInicio;\n\n      // Convertendo a diferença para minutos\n      let diferencaEmMinutos = diferencaEmMilissegundos / (1000 * 60);\n      if (!diferencaEmMinutos) {\n        return 0;\n      }\n      return this.dataFormat(diferencaEmMinutos);\n    },\n    dataFormat(minutos) {\n      let horas = Math.floor(minutos / 60);\n      let minutosRestantes = minutos % 60;\n\n      // Formata as horas e minutos com dois dígitos\n      let horasFormatadas = horas < 10 ? \"0\" + horas : horas;\n      let minutosFormatados =\n        minutosRestantes < 10 ? \"0\" + minutosRestantes : minutosRestantes;\n\n      return horasFormatadas + \":\" + minutosFormatados;\n    },\n    async pausarPonto() {},\n  },\n\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({ key, ...data });\n      });\n    }\n\n    this.registros = registros;\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}