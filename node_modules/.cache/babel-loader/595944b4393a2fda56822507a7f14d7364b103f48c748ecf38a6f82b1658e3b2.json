{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Marcação de Ponto Eletrônico\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.iniciarPonto && $options.iniciarPonto(...args))\n  }, \"iniciar\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.pararPonto && $options.pararPonto(...args))\n  }, \"Finalizar\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.pausarPonto && $options.pausarPonto(...args))\n  }, \"Pausar\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.registros, registro => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: registro.id\n    }, [_createTextVNode(_toDisplayString(registro.data.data) + \" \", 1 /* TEXT */), _hoisted_2, _createTextVNode(\" \" + _toDisplayString(registro.data.horaInicio) + \" \", 1 /* TEXT */), _hoisted_3, _createTextVNode(\" \" + _toDisplayString(registro.data.horaFim) + \" \", 1 /* TEXT */), _hoisted_4, _createTextVNode(\" \" + _toDisplayString($options.timeSpentTask(registro.data)) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.pararPonto(registro.id)\n    }, \"Finalizar\", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","iniciarPonto","pararPonto","pausarPonto","_Fragment","_renderList","$data","registros","registro","key","id","data","_hoisted_2","_toDisplayString","horaInicio","_hoisted_3","horaFim","_hoisted_4","timeSpentTask","$event","_hoisted_5"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"iniciarPonto\">iniciar</button>\n    <button @click=\"pararPonto\">Finalizar</button>\n    <button @click=\"pausarPonto\">Pausar</button>\n    <ul>\n      <li v-for=\"registro in registros\" :key=\"registro.id\">\n        {{ registro.data.data }} <br />\n        {{ registro.data.horaInicio }} <br />\n        {{ registro.data.horaFim }} <br />\n        {{ timeSpentTask(registro.data) }}\n        <button @click=\"pararPonto(registro.id)\">Finalizar</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    async iniciarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n\n      try {\n        let dataAtual = new Date();\n        let objetoDataHora = {\n          data: {\n            dia: dataAtual.getDate(),\n            mes: dataAtual.getMonth() + 1,\n            ano: dataAtual.getFullYear(),\n          },\n          horaInicio: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n          horaFim: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n        };\n\n        const novoRegistro = {\n          data: objetoDataHora,\n          tarefas: [{ tarefa: \"asd\" }],\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid,\n        });\n\n        console.log(\n          \"Registro de ponto salvo com sucesso:\",\n          novoRegistroRef.key\n        );\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({ ...novoRegistro, id: novoRegistroRef.key });\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    timeSpentTask(objetoDataHora) {\n      let dataInicio = new Date();\n      dataInicio.setHours(objetoDataHora.horaInicio.horas);\n      dataInicio.setMinutes(objetoDataHora.horaInicio.minutos);\n\n      let dataFim = new Date();\n      dataFim.setHours(objetoDataHora.horaFim.horas);\n      dataFim.setMinutes(objetoDataHora.horaFim.minutos);\n\n      // Calculando a diferença em milissegundos\n      let diferencaEmMilissegundos = dataFim - dataInicio;\n\n      // Convertendo a diferença para minutos\n      let diferencaEmMinutos = diferencaEmMilissegundos / (1000 * 60);\n\n      return diferencaEmMinutos;\n    },\n    async pararPonto(registroId) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        const snapshot = await get(pontoRef, \"value\");\n        const registro = snapshot.val();\n\n        // Verifica se o registro pertence ao usuário atual\n        console.log(registro && registro.userId === user.uid)\n        if (registro && registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          registro.data.horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // Atualiza a lista de registros na interface do usuário\n          const index = this.registros.findIndex((r) => r.id === registroId);\n          this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    async pausarPonto() {},\n  },\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({ key, ...data });\n      });\n    }\n\n    this.registros = registros;\n  },\n};\n</script>\n"],"mappings":";gCAGIA,mBAAA,CAAqC,YAAjC,8BAA4B;gCAMHA,mBAAA,CAAM;gCACAA,mBAAA,CAAM;gCACTA,mBAAA,CAAM;;;uBATxCC,mBAAA,CAcM,cAbJC,UAAqC,EACrCF,mBAAA,CAA8C;IAArCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;KAAE,SAAO,GACrCL,mBAAA,CAA8C;IAArCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,UAAA,IAAAF,QAAA,CAAAE,UAAA,IAAAH,IAAA,CAAU;KAAE,WAAS,GACrCL,mBAAA,CAA4C;IAAnCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,WAAA,IAAAH,QAAA,CAAAG,WAAA,IAAAJ,IAAA,CAAW;KAAE,QAAM,GACnCL,mBAAA,CAQK,c,kBAPHC,mBAAA,CAMKS,SAAA,QAAAC,WAAA,CANkBC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAnBb,mBAAA,CAMK;MAN8Bc,GAAG,EAAED,QAAQ,CAACE;0CAC5CF,QAAQ,CAACG,IAAI,CAACA,IAAI,IAAG,GAAC,iBAAAC,UAAM,E,iBAAA,GAC/B,GAAAC,gBAAA,CAAGL,QAAQ,CAACG,IAAI,CAACG,UAAU,IAAG,GAAC,iBAAAC,UAAM,E,iBAAA,GACrC,GAAAF,gBAAA,CAAGL,QAAQ,CAACG,IAAI,CAACK,OAAO,IAAG,GAAC,iBAAAC,UAAM,E,iBAAA,GAClC,GAAAJ,gBAAA,CAAGb,QAAA,CAAAkB,aAAa,CAACV,QAAQ,CAACG,IAAI,KAAI,GAClC,iBAAAjB,mBAAA,CAA2D;MAAlDG,OAAK,EAAAsB,MAAA,IAAEnB,QAAA,CAAAE,UAAU,CAACM,QAAQ,CAACE,EAAE;OAAG,WAAS,iBAAAU,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}