{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Marcação de Ponto Eletrônico\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.marcarPonto && $options.marcarPonto(...args))\n  }, \"Marcar Ponto\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.registros, registro => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: registro.id\n    }, _toDisplayString(registro.dataHora) + \" - \" + _toDisplayString(registro.status), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","marcarPonto","_Fragment","_renderList","$data","registros","registro","key","id","dataHora","_toDisplayString","status"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"marcarPonto\">Marcar Ponto</button>\n    <ul>\n      <li v-for=\"registro in registros\" :key=\"registro.id\">\n        {{ registro.dataHora }} - {{ registro.status }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    async marcarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n\n      try {\n        const novoRegistro = {\n          dataInicio: new Date(),\n          dataFim: null,\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid,\n        });\n\n        console.log(\n          \"Registro de ponto salvo com sucesso:\",\n          novoRegistroRef.key\n        );\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({ ...novoRegistro, id: novoRegistroRef.key });\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n  },\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({ key, ...data });\n      });\n    }\n\n    this.registros = registros;\n  },\n};\n</script>\n"],"mappings":";gCAGIA,mBAAA,CAAqC,YAAjC,8BAA4B;;uBADlCC,mBAAA,CAQM,cAPJC,UAAqC,EACrCF,mBAAA,CAAkD;IAAzCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,cAAY,GACzCL,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKO,SAAA,QAAAC,WAAA,CAFkBC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAnBX,mBAAA,CAEK;MAF8BY,GAAG,EAAED,QAAQ,CAACE;wBAC5CF,QAAQ,CAACG,QAAQ,IAAG,KAAG,GAAAC,gBAAA,CAAGJ,QAAQ,CAACK,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}