{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"margin\": \"0 auto\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Marcação de Ponto Eletrônico\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"card\"\n};\nconst _hoisted_4 = {\n  class: \"card-body\"\n};\nconst _hoisted_5 = {\n  class: \"card-title\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  key: 0,\n  class: \"col-md-10\"\n};\nconst _hoisted_13 = {\n  class: \"card\"\n};\nconst _hoisted_14 = {\n  class: \"card-body\"\n};\nconst _hoisted_15 = {\n  class: \"card-title\"\n};\nconst _hoisted_16 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_17 = [\"onClick\"];\nconst _hoisted_18 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.iniciarPonto && $options.iniciarPonto(...args))\n  }, \"Iniciar Periodo\"), _createCommentVNode(\" <button @click=\\\"pararPonto\\\">Finalizar Dia</button>\\n    <button @click=\\\"pausarPonto\\\">Pausar</button> \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.registros, registro => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: registro.userId,\n      class: \"col-md-10\"\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h5\", _hoisted_5, \" Dia: \" + _toDisplayString(registro.data.data.dia) + \"/\" + _toDisplayString(registro.data.data.mes) + \"/\" + _toDisplayString(registro.data.data.ano), 1 /* TEXT */), _hoisted_6, _createTextVNode(\" hora inicio: \" + _toDisplayString(registro.data.horaInicio.horas) + \":\" + _toDisplayString(registro.data.horaInicio.minutos) + \" \", 1 /* TEXT */), _hoisted_7, $options.timeSpentTask(registro.data.horaInicio, registro.data.horaFim) ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createTextVNode(\" Hora fim: \" + _toDisplayString(registro.data.horaFim.horas) + \":\" + _toDisplayString(registro.data.horaFim.minutos) + \" \", 1 /* TEXT */), _hoisted_8], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" Tempo gasto: \" + _toDisplayString($options.timeSpentTask(registro.data.horaInicio, registro.data.horaFim)) + \" \", 1 /* TEXT */), _hoisted_9, !$options.timeSpentTask(registro.data.horaInicio, registro.data.horaFim) ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      onClick: $event => $options.pararPonto(registro.key, registro)\n    }, \" Finalizar Periodo \", 8 /* PROPS */, _hoisted_10)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n      onClick: $event => $options.adiconarTarefa(registro.key, registro)\n    }, \" adiconar Tarefa \", 8 /* PROPS */, _hoisted_11), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(registro.tarefas, (tarefa, index) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: tarefa\n      }, [tarefa ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"h5\", _hoisted_15, _toDisplayString(tarefa.descricao), 1 /* TEXT */), _createTextVNode(\" hora inicio: \" + _toDisplayString(tarefa.horaInicio.horas) + \":\" + _toDisplayString(tarefa.horaInicio.minutos) + \" \", 1 /* TEXT */), $options.timeSpentTask(tarefa.horaInicio, tarefa.horaFim) ? (_openBlock(), _createElementBlock(_Fragment, {\n        key: 0\n      }, [_createTextVNode(\" Hora fim: \" + _toDisplayString(tarefa.horaFim.horas) + \":\" + _toDisplayString(tarefa.horaFim.minutos) + \" \", 1 /* TEXT */), _hoisted_16], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" Tempo gasto: \" + _toDisplayString($options.timeSpentTask(tarefa.horaInicio, tarefa.horaFim)) + \" \", 1 /* TEXT */), !$options.timeSpentTask(tarefa.horaInicio, tarefa.horaFim) ? (_openBlock(), _createElementBlock(_Fragment, {\n        key: 1\n      }, [_createElementVNode(\"button\", {\n        onClick: $event => $options.finalizarTarefa(registro.key, registro, index)\n      }, \" Finalizar Tarefa \", 8 /* PROPS */, _hoisted_17), _hoisted_18], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true)]);\n    }), 128 /* KEYED_FRAGMENT */))])])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["style","_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$options","iniciarPonto","_createCommentVNode","_Fragment","_renderList","$data","registros","registro","key","userId","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","data","dia","mes","ano","_hoisted_6","horaInicio","horas","minutos","_hoisted_7","timeSpentTask","horaFim","_hoisted_8","_hoisted_9","$event","pararPonto","_hoisted_10","adiconarTarefa","_hoisted_11","tarefas","tarefa","index","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","descricao","_hoisted_16","finalizarTarefa","_hoisted_17","_hoisted_18"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div style=\"margin: 0 auto\">\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"iniciarPonto\">Iniciar Periodo</button>\n    <!-- <button @click=\"pararPonto\">Finalizar Dia</button>\n    <button @click=\"pausarPonto\">Pausar</button> -->\n    <div v-for=\"registro in registros\" :key=\"registro.userId\" class=\"col-md-10\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">\n            Dia: {{ registro.data.data.dia }}/{{ registro.data.data.mes }}/{{\n              registro.data.data.ano\n            }}\n          </h5>\n          <br />\n          hora inicio: {{ registro.data.horaInicio.horas }}:{{\n            registro.data.horaInicio.minutos\n          }}\n          <br />\n          <template\n            v-if=\"\n              timeSpentTask(registro.data.horaInicio, registro.data.horaFim)\n            \"\n          >\n            Hora fim: {{ registro.data.horaFim.horas }}:{{\n              registro.data.horaFim.minutos\n            }}\n            <br />\n          </template>\n          Tempo gasto:\n          {{ timeSpentTask(registro.data.horaInicio, registro.data.horaFim) }}\n          <br />\n          <template\n            v-if=\"\n              !timeSpentTask(registro.data.horaInicio, registro.data.horaFim)\n            \"\n          >\n            <button @click=\"pararPonto(registro.key, registro)\">\n              Finalizar Periodo\n            </button>\n          </template>\n          <button @click=\"adiconarTarefa(registro.key, registro)\">\n            adiconar Tarefa\n          </button>\n          <div v-for=\"(tarefa, index) in registro.tarefas\" :key=\"tarefa\">\n            <template v-if=\"tarefa\">\n              <div class=\"col-md-10\">\n                <div class=\"card\">\n                  <div class=\"card-body\">\n                    <h5 class=\"card-title\">{{ tarefa.descricao }}</h5>\n\n                    hora inicio: {{ tarefa.horaInicio.horas }}:{{\n                      tarefa.horaInicio.minutos\n                    }}\n                    <template\n                      v-if=\"timeSpentTask(tarefa.horaInicio, tarefa.horaFim)\"\n                    >\n                      Hora fim: {{ tarefa.horaFim.horas }}:{{\n                        tarefa.horaFim.minutos\n                      }}\n                      <br />\n                    </template>\n\n                    Tempo gasto:\n                    {{ timeSpentTask(tarefa.horaInicio, tarefa.horaFim) }}\n                    <template\n                      v-if=\"!timeSpentTask(tarefa.horaInicio, tarefa.horaFim)\"\n                    >\n                      <button\n                        @click=\"finalizarTarefa(registro.key, registro, index)\"\n                      >\n                        Finalizar Tarefa\n                      </button>\n                      <br />\n                    </template>\n                  </div>\n                </div>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase, get, ref, push, set } from \"firebase/database\";\nimport Swal from \"sweetalert2\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    iniciarPonto() {\n      Swal.fire({\n        title: \"Adicione o nome da tarefa que você vai iniciar\",\n        input: \"text\",\n        inputAttributes: {\n          autocapitalize: \"off\",\n        },\n        showCancelButton: true,\n        confirmButtonText: \"Salvar\",\n        showLoaderOnConfirm: true,\n        allowOutsideClick: () => !Swal.isLoading(),\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.sendPonto(result.value);\n        } else {\n          return;\n        }\n      });\n    },\n    async sendPonto(taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, \"pontos\");\n\n      try {\n        let dataAtual = new Date();\n        let objetoDataHora = {\n          data: {\n            dia: dataAtual.getDate(),\n            mes: dataAtual.getMonth() + 1,\n            ano: dataAtual.getFullYear(),\n          },\n          horaInicio: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n          horaFim: {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          },\n          tarefas: [],\n        };\n\n        const novoRegistro = {\n          data: objetoDataHora,\n          tarefas: [\n            {\n              descricao: taskName,\n              horaInicio: {\n                horas: dataAtual.getHours(),\n                minutos: dataAtual.getMinutes(),\n              },\n              horaFim: {\n                horas: dataAtual.getHours(),\n                minutos: dataAtual.getMinutes(),\n              },\n            },\n          ],\n        };\n\n        // Adiciona um novo registro no Realtime Database\n        const novoRegistroRef = push(pontoRef);\n        await set(novoRegistroRef, {\n          ...novoRegistro,\n          userId: user.uid,\n        });\n\n        console.log(\n          \"Registro de ponto salvo com sucesso:\",\n          novoRegistroRef.key\n        );\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.reverse();\n        this.registros.push({ ...novoRegistro, id: novoRegistroRef.key });\n        this.registros.reverse();\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n    async pararPonto(registroId, registro) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          registro.data.horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    adiconarTarefa(registroId, registro) {\n      let tarefaEmAndamento = false;\n      registro.tarefas.forEach((tarefa) => {\n        console.log(tarefa);\n        if (!this.timeSpentTask(tarefa.horaInicio, tarefa.horaFim)) {\n          console.log(\n            \"A tarefa \" +\n              tarefa.descricao +\n              \" não foi finalizada, finalizar antes de iniciar outra\"\n          );\n          tarefaEmAndamento = true;\n          Swal.fire({\n            title:\n              \"a tarefa \" +\n              tarefa.descricao +\n              \" não foi finalizada, finalizar antes de iniciar outra\",\n            confirmButtonText: \"OK\",\n          });\n        }\n      });\n      if (!tarefaEmAndamento) {\n        Swal.fire({\n          title: \"Adicione o nome da tarefa que você vai iniciar\",\n          input: \"text\",\n          inputAttributes: {\n            autocapitalize: \"off\",\n          },\n          showCancelButton: true,\n          confirmButtonText: \"Salvar\",\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading(),\n        }).then((result) => {\n          if (result.isConfirmed) {\n            this.sendTask(registroId, registro, result.value);\n          } else {\n            return;\n          }\n        });\n      }\n    },\n    async sendTask(registroId, registro, taskName) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n      console.log(taskName);\n      try {\n        console.log(taskName);\n        if (registro.userId === user.uid) {\n          // Atualiza a propriedade horaFim para a data atual\n          let dataAtual = new Date();\n          console.log(taskName);\n          const tarefa = {\n            descricao: taskName,\n            horaInicio: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n            horaFim: {\n              horas: dataAtual.getHours(),\n              minutos: dataAtual.getMinutes(),\n            },\n          };\n          console.log(registro.data);\n          registro.tarefas.push(tarefa);\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    async finalizarTarefa(registroId, registro, index) {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      let dataAtual = new Date();\n\n      const db = getDatabase();\n      const pontoRef = ref(db, `pontos/${registroId}`);\n\n      try {\n        if (registro.userId === user.uid) {\n          console.log(registro.tarefas[index].horaFim);\n          registro.tarefas[index].horaFim = {\n            horas: dataAtual.getHours(),\n            minutos: dataAtual.getMinutes(),\n          };\n\n          // Atualiza o registro no Firebase\n          await set(pontoRef, registro);\n\n          console.log(\"Registro de ponto finalizado com sucesso:\", registroId);\n\n          // // Atualiza a lista de registros na interface do usuário\n          // const index = this.registros.findIndex((r) => r.id === registroId);\n          // this.$set(this.registros, index, { ...registro, id: registroId });\n        } else {\n          console.warn(\"O registro não pertence ao usuário atual.\");\n        }\n      } catch (error) {\n        console.error(\"Erro ao finalizar ponto:\", error.message);\n      }\n    },\n    timeSpentTask(horaInicio, horaFim) {\n      let dataInicio = new Date();\n      dataInicio.setHours(horaInicio.horas);\n      dataInicio.setMinutes(horaInicio.minutos);\n\n      let dataFim = new Date();\n      dataFim.setHours(horaFim.horas);\n      dataFim.setMinutes(horaFim.minutos);\n\n      // Calculando a diferença em milissegundos\n      let diferencaEmMilissegundos = dataFim - dataInicio;\n\n      // Convertendo a diferença para minutos\n      let diferencaEmMinutos = diferencaEmMilissegundos / (1000 * 60);\n      if (!diferencaEmMinutos) {\n        return 0;\n      }\n      return this.dataFormat(diferencaEmMinutos);\n    },\n    dataFormat(minutos) {\n      let horas = Math.floor(minutos / 60);\n      let minutosRestantes = minutos % 60;\n\n      // Formata as horas e minutos com dois dígitos\n      let horasFormatadas = horas < 10 ? \"0\" + horas : horas;\n      let minutosFormatados =\n        minutosRestantes < 10 ? \"0\" + minutosRestantes : minutosRestantes;\n\n      return horasFormatadas + \":\" + minutosFormatados;\n    },\n    async pausarPonto() {},\n    validarDataMaior\n  },\n\n  async created() {\n    const db = getDatabase();\n    const pontoRef = ref(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Realtime Database\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const snapshot = await get(pontoRef, \"value\");\n    const registros = [];\n\n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const key = childSnapshot.key;\n        const data = childSnapshot.val();\n        registros.push({ key, ...data });\n      });\n    }\n\n    this.registros = registros.reverse();\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}