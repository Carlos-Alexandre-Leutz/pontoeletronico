{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\nimport { getStorage, ref, uploadString, getDownloadURL } from \"firebase/storage\";\nexport default {\n  data() {\n    return {\n      registros: []\n    };\n  },\n  methods: {\n    async marcarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n      if (!user) {\n        console.error(\"Usuário não autenticado\");\n        return;\n      }\n      const db = getFirestore();\n      const pontoCollection = collection(db, \"pontos\");\n      try {\n        const novoRegistro = {\n          dataHora: serverTimestamp(),\n          status: \"Marcado\",\n          userId: user.uid\n        };\n\n        // Adiciona um novo registro no Firestore\n        const docRef = await addDoc(pontoCollection, novoRegistro);\n        console.log(\"Ponto marcado com sucesso:\", docRef.id);\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({\n          ...novoRegistro,\n          id: docRef.id\n        });\n\n        // Salva um arquivo no Storage\n        const storage = getStorage();\n        const path = `ponto-entrada/${user.uid}/${docRef.id}.txt`;\n        await uploadString(ref(storage, path), \"Ponto Eletrônico Marcado\");\n\n        // Obtém o URL de download do arquivo no Storage\n        const downloadUrl = await getDownloadURL(ref(storage, path));\n\n        // Atualiza a lista de registros na interface do usuário com o URL de download\n        this.registros.find(r => r.id === docRef.id).downloadUrl = downloadUrl;\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    }\n  },\n  async created() {\n    const auth = getAuth();\n    const user = auth.currentUser;\n    if (!user) {\n      console.error(\"Usuário não autenticado\");\n      return;\n    }\n    const db = getFirestore();\n    const pontoCollection = collection(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Firestore\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const querySnapshot = await getDocs(query(pontoCollection, where(\"userId\", \"==\", user.uid), orderBy(\"dataHora\", \"desc\"), limit(10)));\n    querySnapshot.forEach(doc => {\n      this.registros.push({\n        ...doc.data(),\n        id: doc.id\n      });\n    });\n  }\n};","map":{"version":3,"names":["getAuth","getFirestore","collection","addDoc","serverTimestamp","getStorage","ref","uploadString","getDownloadURL","data","registros","methods","marcarPonto","auth","user","currentUser","console","error","db","pontoCollection","novoRegistro","dataHora","status","userId","uid","docRef","log","id","push","storage","path","downloadUrl","find","r","message","created","querySnapshot","getDocs","query","where","orderBy","limit","forEach","doc"],"sources":["/home/alexandre/code/ponto-eletronico/src/components/ClockInClockOut.vue"],"sourcesContent":["<!-- PontoEletronico.vue -->\n<template>\n  <div>\n    <h1>Marcação de Ponto Eletrônico</h1>\n    <button @click=\"marcarPonto\">Marcar Ponto</button>\n    <ul>\n      <li v-for=\"registro in registros\" :key=\"registro.id\">\n        {{ registro.dataHora }} - {{ registro.status }} -\n        {{ registro.downloadUrl }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { getAuth } from \"firebase/auth\";\nimport {\n  getFirestore,\n  collection,\n  addDoc,\n  serverTimestamp,\n} from \"firebase/firestore\";\nimport {\n  getStorage,\n  ref,\n  uploadString,\n  getDownloadURL,\n} from \"firebase/storage\";\n\nexport default {\n  data() {\n    return {\n      registros: [],\n    };\n  },\n  methods: {\n    async marcarPonto() {\n      const auth = getAuth();\n      const user = auth.currentUser;\n\n      if (!user) {\n        console.error(\"Usuário não autenticado\");\n        return;\n      }\n\n      const db = getFirestore();\n      const pontoCollection = collection(db, \"pontos\");\n\n      try {\n        const novoRegistro = {\n          dataHora: serverTimestamp(),\n          status: \"Marcado\",\n          userId: user.uid,\n        };\n\n        // Adiciona um novo registro no Firestore\n        const docRef = await addDoc(pontoCollection, novoRegistro);\n\n        console.log(\"Ponto marcado com sucesso:\", docRef.id);\n\n        // Atualiza a lista de registros na interface do usuário\n        this.registros.push({ ...novoRegistro, id: docRef.id });\n\n        // Salva um arquivo no Storage\n        const storage = getStorage();\n        const path = `ponto-entrada/${user.uid}/${docRef.id}.txt`;\n        await uploadString(ref(storage, path), \"Ponto Eletrônico Marcado\");\n\n        // Obtém o URL de download do arquivo no Storage\n        const downloadUrl = await getDownloadURL(ref(storage, path));\n\n        // Atualiza a lista de registros na interface do usuário com o URL de download\n        this.registros.find((r) => r.id === docRef.id).downloadUrl =\n          downloadUrl;\n      } catch (error) {\n        console.error(\"Erro ao marcar ponto:\", error.message);\n      }\n    },\n  },\n  async created() {\n    const auth = getAuth();\n    const user = auth.currentUser;\n\n    if (!user) {\n      console.error(\"Usuário não autenticado\");\n      return;\n    }\n\n    const db = getFirestore();\n    const pontoCollection = collection(db, \"pontos\");\n\n    // Consulta os registros de ponto do usuário no Firestore\n    // Este exemplo apenas carrega os últimos 10 registros, você pode ajustar conforme necessário\n    const querySnapshot = await getDocs(\n      query(\n        pontoCollection,\n        where(\"userId\", \"==\", user.uid),\n        orderBy(\"dataHora\", \"desc\"),\n        limit(10)\n      )\n    );\n\n    querySnapshot.forEach((doc) => {\n      this.registros.push({ ...doc.data(), id: doc.id });\n    });\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}